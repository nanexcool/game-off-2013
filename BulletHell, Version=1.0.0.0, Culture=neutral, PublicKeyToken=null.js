/* Generated by JSIL v0.7.6 build 31911. See http://jsil.org/ for more information. */ 
var $asm00 = JSIL.DeclareAssembly("BulletHell, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.SetEntryPoint($asm00, $asm00.TypeRef("BulletHell.Program"), "Main", new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.String")])]));

JSIL.DeclareNamespace("BulletHell");
JSIL.DeclareNamespace("BulletHell.Engine");
(function Entity$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Void)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.BulletHell.Engine.Tile)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.BulletHell.Engine.Level)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };

  function Entity__ctor$00 (texture) {
    this.canMoveHorizontal = true;
    this.canMoveVertical = true;
    this.Entity$Texture$value = texture;
    this.Entity$Width$value = texture.get_Width();
    this.Entity$Height$value = texture.get_Height();
    (this.Entity$Color$value = $T01().get_White().MemberwiseClone());
    this.Entity$CanFly$value = false;
    this.Entity$CanRemove$value = false;
  };

  function Entity_Draw (spriteBatch) {
    var drawRect = this.get_DrawRectangle();
    spriteBatch.Draw(this.Entity$Texture$value, $S00().Construct((this.position.X - $T05().$Cast(this.Entity$XOffset$value)), (this.position.Y - $T05().$Cast(this.Entity$YOffset$value))), this.Entity$Color$value);
  };

  function Entity_get_CanFly () {
    return this.Entity$CanFly$value;
  };

  function Entity_get_CanRemove () {
    return this.Entity$CanRemove$value;
  };

  function Entity_get_CollisionBox () {
    return new ($T03())(((this.get_X() - this.Entity$XOffset$value) | 0), ((this.get_Y() - this.Entity$YOffset$value) | 0), ((this.Entity$Width$value + ((this.Entity$XOffset$value * 2) | 0)) | 0), ((this.Entity$Height$value + ((this.Entity$YOffset$value * 2) | 0)) | 0));
  };

  function Entity_get_Color () {
    return this.Entity$Color$value;
  };

  function Entity_get_DrawRectangle () {
    return new ($T03())(this.get_X(), this.get_Y(), this.Entity$Width$value, this.Entity$Height$value);
  };

  function Entity_get_Height () {
    return this.Entity$Height$value;
  };

  function Entity_get_Level () {
    return this.Entity$Level$value;
  };

  function Entity_get_Position () {
    return this.position;
  };

  function Entity_get_Texture () {
    return this.Entity$Texture$value;
  };

  function Entity_get_Velocity () {
    return this.velocity;
  };

  function Entity_get_Width () {
    return this.Entity$Width$value;
  };

  function Entity_get_X () {
    return ((Math.floor(this.position.X)) | 0);
  };

  function Entity_get_XOffset () {
    return this.Entity$XOffset$value;
  };

  function Entity_get_Y () {
    return ((Math.floor(this.position.Y)) | 0);
  };

  function Entity_get_YOffset () {
    return this.Entity$YOffset$value;
  };

  function Entity_Move (elapsed) {
    var wantedPosition = this.position.MemberwiseClone();
    this.canMoveHorizontal = true;
    this.canMoveVertical = true;
    if (!this.Entity$CanFly$value) {
      if (this.velocity.X < 0) {
        wantedPosition.X += +(this.velocity.X * elapsed);
        var x = ((wantedPosition.X / $T05().$Cast($T09().Size)) | 0);
        var x2 = (((wantedPosition.X + $T05().$Cast(this.Entity$Width$value)) / $T05().$Cast($T09().Size)) | 0);
        var y = ((wantedPosition.Y / $T05().$Cast($T09().Size)) | 0);
        var y2 = (((wantedPosition.Y + $T05().$Cast(this.Entity$Height$value)) / $T05().$Cast($T09().Size)) | 0);

        for (var y3 = y; y3 <= y2; y3 = ((y3 + 1) | 0)) {
          if (this.Entity$Level$value.GetTile(x, y3).IsSolid()) {
            this.canMoveHorizontal = false;
            this.velocity.X = +0;
          }
        }
      }
      if (this.velocity.X > 0) {
        wantedPosition.X += +(this.velocity.X * elapsed);
        x = ((wantedPosition.X / $T05().$Cast($T09().Size)) | 0);
        x2 = (((wantedPosition.X + $T05().$Cast(this.Entity$Width$value)) / $T05().$Cast($T09().Size)) | 0);
        y = ((wantedPosition.Y / $T05().$Cast($T09().Size)) | 0);
        y2 = (((wantedPosition.Y + $T05().$Cast(this.Entity$Height$value)) / $T05().$Cast($T09().Size)) | 0);

        for (y3 = y; y3 <= y2; y3 = ((y3 + 1) | 0)) {
          if (this.Entity$Level$value.GetTile(x2, y3).IsSolid()) {
            this.canMoveHorizontal = false;
            this.velocity.X = +0;
          }
        }
      }
      wantedPosition.X = +this.position.X;
      if (this.velocity.Y < 0) {
        wantedPosition.Y += +(this.velocity.Y * elapsed);
        x = ((wantedPosition.X / $T05().$Cast($T09().Size)) | 0);
        x2 = (((wantedPosition.X + $T05().$Cast(this.Entity$Width$value)) / $T05().$Cast($T09().Size)) | 0);
        y = ((wantedPosition.Y / $T05().$Cast($T09().Size)) | 0);
        y2 = (((wantedPosition.Y + $T05().$Cast(this.Entity$Height$value)) / $T05().$Cast($T09().Size)) | 0);

        for (var x3 = x; x3 <= x2; x3 = ((x3 + 1) | 0)) {
          if (this.Entity$Level$value.GetTile(x3, y).IsSolid()) {
            this.canMoveVertical = false;
            this.velocity.Y = +0;
          }
        }
      }
      if (this.velocity.Y > 0) {
        wantedPosition.Y += +(this.velocity.Y * elapsed);
        x = ((wantedPosition.X / $T05().$Cast($T09().Size)) | 0);
        x2 = (((wantedPosition.X + $T05().$Cast(this.Entity$Width$value)) / $T05().$Cast($T09().Size)) | 0);
        y = ((wantedPosition.Y / $T05().$Cast($T09().Size)) | 0);
        y2 = (((wantedPosition.Y + $T05().$Cast(this.Entity$Height$value)) / $T05().$Cast($T09().Size)) | 0);

        for (x3 = x; x3 <= x2; x3 = ((x3 + 1) | 0)) {
          if (this.Entity$Level$value.GetTile(x3, y2).IsSolid()) {
            this.canMoveVertical = false;
            this.velocity.Y = +0;
          }
        }
      }
    }
    if (this.canMoveHorizontal) {
      this.position.X += +(this.velocity.X * elapsed);
    }
    if (this.canMoveVertical) {
      this.position.Y += +(this.velocity.Y * elapsed);
    }
  };

  function Entity_set_CanFly (value) {
    this.Entity$CanFly$value = value;
  };

  function Entity_set_CanRemove (value) {
    this.Entity$CanRemove$value = value;
  };

  function Entity_set_Color (value) {
    this.Entity$Color$value = value;
  };

  function Entity_set_Height (value) {
    this.Entity$Height$value = value;
  };

  function Entity_set_Level (value) {
    this.Entity$Level$value = value;
  };

  function Entity_set_Position (value) {
    this.position = value;
  };

  function Entity_set_Texture (value) {
    this.Entity$Texture$value = value;
  };

  function Entity_set_Velocity (value) {
    this.velocity = value;
  };

  function Entity_set_Width (value) {
    this.Entity$Width$value = value;
  };

  function Entity_set_XOffset (value) {
    this.Entity$XOffset$value = value;
  };

  function Entity_set_YOffset (value) {
    this.Entity$YOffset$value = value;
  };

  function Entity_Update (elapsed) {
    if (!((this.velocity.X === 0) && (this.velocity.Y === 0))) {
      this.Move(elapsed);
      this.position = $T04().Clamp(this.position.MemberwiseClone(), $T04().get_Zero().MemberwiseClone(), $S00().Construct($T05().$Cast(((((this.Entity$Level$value.Level$Width$value * $T09().Size) | 0) - this.Entity$Width$value) | 0)), $T05().$Cast(((((this.Entity$Level$value.Level$Height$value * $T09().Size) | 0) - this.Entity$Height$value) | 0)))).MemberwiseClone();
    }
  };

  JSIL.MakeClass($asm06.TypeRef("System.Object"), "BulletHell.Engine.Entity", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")], []), 
      Entity__ctor$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")], []), 
      Entity_Draw
    );

    $.Method({Static:false, Public:true }, "get_CanFly", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Entity_get_CanFly
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_CanRemove", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Entity_get_CanRemove
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_CollisionBox", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), [], []), 
      Entity_get_CollisionBox
    );

    $.Method({Static:false, Public:true }, "get_Color", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Color"), [], []), 
      Entity_get_Color
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_DrawRectangle", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), [], []), 
      Entity_get_DrawRectangle
    );

    $.Method({Static:false, Public:true }, "get_Height", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Entity_get_Height
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Level", 
      new JSIL.MethodSignature($asm00.TypeRef("BulletHell.Engine.Level"), [], []), 
      Entity_get_Level
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Position", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], []), 
      Entity_get_Position
    );

    $.Method({Static:false, Public:true }, "get_Texture", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [], []), 
      Entity_get_Texture
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Velocity", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], []), 
      Entity_get_Velocity
    );

    $.Method({Static:false, Public:true }, "get_Width", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Entity_get_Width
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_X", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Entity_get_X
    );

    $.Method({Static:false, Public:true }, "get_XOffset", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Entity_get_XOffset
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Y", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Entity_get_Y
    );

    $.Method({Static:false, Public:true }, "get_YOffset", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Entity_get_YOffset
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "Move", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Entity_Move
    );

    $.Method({Static:false, Public:true }, "set_CanFly", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      Entity_set_CanFly
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_CanRemove", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      Entity_set_CanRemove
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Color", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Color")], []), 
      Entity_set_Color
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Height", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      Entity_set_Height
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Level", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BulletHell.Engine.Level")], []), 
      Entity_set_Level
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      Entity_set_Position
    );

    $.Method({Static:false, Public:true }, "set_Texture", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")], []), 
      Entity_set_Texture
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Velocity", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      Entity_set_Velocity
    );

    $.Method({Static:false, Public:true }, "set_Width", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      Entity_set_Width
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_XOffset", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      Entity_set_XOffset
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_YOffset", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      Entity_set_YOffset
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Entity_Update
    );

    $.Field({Static:false, Public:false}, "position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "acceleration", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "oldPosition", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "canMoveHorizontal", $.Boolean); 
    $.Field({Static:false, Public:false}, "canMoveVertical", $.Boolean); 
    $.Field({Static:false, Public:false}, "Entity$Width$value", $.Int32)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Entity$Height$value", $.Int32)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Entity$XOffset$value", $.Int32)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Entity$YOffset$value", $.Int32)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Entity$CanFly$value", $.Boolean)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Entity$Texture$value", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Entity$Color$value", $asm01.TypeRef("Microsoft.Xna.Framework.Color"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Entity$Level$value", $asm00.TypeRef("BulletHell.Engine.Level"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Entity$CanRemove$value", $.Boolean)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "X", $.Int32);

    $.Property({Static:false, Public:true }, "Y", $.Int32);

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    $.Property({Static:false, Public:true }, "XOffset", $.Int32);

    $.Property({Static:false, Public:true }, "YOffset", $.Int32);

    $.Property({Static:false, Public:true }, "CanFly", $.Boolean);

    $.Property({Static:false, Public:true }, "DrawRectangle", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CollisionBox", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Property({Static:false, Public:true }, "Texture", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Property({Static:false, Public:true }, "Color", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Property({Static:false, Public:true }, "Level", $asm00.TypeRef("BulletHell.Engine.Level"));

    $.Property({Static:false, Public:true }, "CanRemove", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Bullet$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.BulletHell.Engine.Entity)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.BulletHell.Engine.Util)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.BulletHell.Engine.Enemy)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };

  function Bullet__ctor () {
    this.life = +0;
    $T00().prototype._ctor.call(this, $T01().Texture);
    this.Entity$Width$value = 16;
    this.Entity$Height$value = 16;
    this.Bullet$Speed$value = +500;
    this.Bullet$TimeToLive$value = +0.8;
    (this.Entity$Color$value = $T02().get_Aqua().MemberwiseClone());
    this.Bullet$IsActive$value = true;
  };

  function Bullet_Draw (spriteBatch) {
    spriteBatch.DrawRect($T01().Texture, this.get_CollisionBox(), new ($T04())(0, 0, this.Entity$Width$value, this.Entity$Height$value), this.Entity$Color$value);
  };

  function Bullet_get_IsActive () {
    return this.Bullet$IsActive$value;
  };

  function Bullet_get_Speed () {
    return +this.Bullet$Speed$value;
  };

  function Bullet_get_TimeToLive () {
    return +this.Bullet$TimeToLive$value;
  };

  function Bullet_OnCollide (e) {
    if ($T05().$Is(e)) {
      e.Entity$CanRemove$value = true;
      this.Bullet$IsActive$value = false;
    }
  };

  function Bullet_set_IsActive (value) {
    this.Bullet$IsActive$value = value;
  };

  function Bullet_set_Speed (value) {
    this.Bullet$Speed$value = +value;
  };

  function Bullet_set_TimeToLive (value) {
    this.Bullet$TimeToLive$value = +value;
  };

  function Bullet_Update (elapsed) {
    (this.Entity$Position = $T08().op_Addition(this.Entity$Position, $T08().op_MultiplyScalar($T08().op_MultiplyScalar(this.get_Velocity(), this.Bullet$Speed$value), elapsed)));
    this.life += +elapsed;
    if (this.life >= this.Bullet$TimeToLive$value) {
      this.Bullet$IsActive$value = false;
    }
  };

  JSIL.MakeClass($asm00.TypeRef("BulletHell.Engine.Entity"), "BulletHell.Engine.Bullet", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Bullet__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")], []), 
      Bullet_Draw
    );

    $.Method({Static:false, Public:true }, "get_IsActive", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Bullet_get_IsActive
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Speed", 
      new JSIL.MethodSignature($.Single, [], []), 
      Bullet_get_Speed
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TimeToLive", 
      new JSIL.MethodSignature($.Single, [], []), 
      Bullet_get_TimeToLive
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "OnCollide", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BulletHell.Engine.Entity")], []), 
      Bullet_OnCollide
    );

    $.Method({Static:false, Public:true }, "set_IsActive", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      Bullet_set_IsActive
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Speed", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Bullet_set_Speed
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_TimeToLive", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Bullet_set_TimeToLive
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Bullet_Update
    );

    $.Field({Static:false, Public:false}, "life", $.Single); 
    $.Field({Static:false, Public:false}, "Bullet$Speed$value", $.Single)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Bullet$IsActive$value", $.Boolean)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Bullet$TimeToLive$value", $.Single)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Speed", $.Single);

    $.Property({Static:false, Public:true }, "IsActive", $.Boolean);

    $.Property({Static:false, Public:true }, "TimeToLive", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Camera$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Void)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.BulletHell.Engine.Entity)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.BulletHell.Engine.Util)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Matrix"), [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix"), $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Matrix"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [
        $asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single"), 
        $asm06.TypeRef("System.Single")
      ]))) ();
  };

  function Camera__ctor (game) {
    this.Camera$Width$value = game.get_GraphicsDevice().get_Viewport().get_Width();
    this.Camera$Height$value = game.get_GraphicsDevice().get_Viewport().get_Height();
    (this.Camera$Bounds$value = game.get_GraphicsDevice().get_Viewport().get_Bounds().MemberwiseClone());
    this.center = $S00().Construct($T04().$Cast(((this.Camera$Width$value / 2) | 0)), $T04().$Cast(((this.Camera$Height$value / 2) | 0)));
    this.scale = +1;
    this.Camera$NewScale$value = +this.scale;
    this.Camera$Rotation$value = +0;
  };

  function Camera_get_Bounds () {
    return this.Camera$Bounds$value;
  };

  function Camera_get_Focus () {
    return this.Camera$Focus$value;
  };

  function Camera_get_Height () {
    return this.Camera$Height$value;
  };

  function Camera_get_NewScale () {
    return +this.Camera$NewScale$value;
  };

  function Camera_get_Origin () {
    return this.Camera$Origin$value;
  };

  function Camera_get_Position () {
    return this.position;
  };

  function Camera_get_Rotation () {
    return +this.Camera$Rotation$value;
  };

  function Camera_get_Scale () {
    return +this.scale;
  };

  function Camera_get_Transform () {
    return this.Camera$Transform$value;
  };

  function Camera_get_Width () {
    return this.Camera$Width$value;
  };

  function Camera_get_X () {
    return ((Math.floor(this.position.X)) | 0);
  };

  function Camera_get_Y () {
    return ((Math.floor(this.position.Y)) | 0);
  };

  function Camera_ResetViewport (v) {
    this.Camera$Width$value = v.get_Width();
    this.Camera$Height$value = v.get_Height();
    this.center = $S00().Construct($T04().$Cast(((this.Camera$Width$value / 2) | 0)), $T04().$Cast(((this.Camera$Height$value / 2) | 0)));
  };

  function Camera_set_Bounds (value) {
    this.Camera$Bounds$value = value;
  };

  function Camera_set_Focus (value) {
    this.Camera$Focus$value = value;
  };

  function Camera_set_Height (value) {
    this.Camera$Height$value = value;
  };

  function Camera_set_NewScale (value) {
    this.Camera$NewScale$value = +value;
  };

  function Camera_set_Origin (value) {
    this.Camera$Origin$value = value;
  };

  function Camera_set_Position (value) {
    this.position = value;
  };

  function Camera_set_Rotation (value) {
    this.Camera$Rotation$value = +value;
  };

  function Camera_set_Scale (value) {
    this.scale = +value;
  };

  function Camera_set_Transform (value) {
    this.Camera$Transform$value = value;
  };

  function Camera_set_Width (value) {
    this.Camera$Width$value = value;
  };

  function Camera_Shake (magnitude, duration) {
    this.shaking = true;
    this.shakeMagnitude = +magnitude;
    this.shakeDuration = +duration;
    this.shakeTimer = +0;
  };

  function Camera_Update (elapsed) {
    this.scale += +(((this.Camera$NewScale$value - this.get_Scale()) * 4) * elapsed);
    (this.Camera$Transform$value = $S01().CallStatic($T0A(), "op_Multiply", null, 
        $S01().CallStatic($T0A(), "op_Multiply", null, 
          $S01().CallStatic($T0A(), "op_Multiply", null, 
            $S01().CallStatic($T0A(), "op_Multiply", null, 
              $T0A().get_Identity(), 
              $T0A().CreateTranslation(
                $T04().$Cast(-$T04().$Cast(this.get_X())), 
                $T04().$Cast(-$T04().$Cast(this.get_Y())), 
                0
              )
            ), 
            $T0A().CreateRotationZ(this.Camera$Rotation$value)
          ), 
          $T0A().CreateTranslation(this.Camera$Origin$value.X, this.Camera$Origin$value.Y, 0)
        ), 
        $S02().CallStatic($T0A(), "CreateScale", null, $S03().Construct(this.scale, this.scale, this.scale))
      ));
    (this.Camera$Origin$value = $T03().op_DivisionScalar(this.center, this.scale));
    if (this.shaking) {
      this.shakeTimer += +elapsed;
      if (this.shakeTimer >= this.shakeDuration) {
        this.shaking = false;
        this.shakeTimer = +this.shakeDuration;
      }
      this.shakeOffset = $T03().op_MultiplyScalar($S00().Construct((($T0C().NextFloat() * 2) - 1), (($T0C().NextFloat() * 2) - 1)), (this.shakeMagnitude * (1 - ((this.shakeTimer / this.shakeDuration) * (this.shakeTimer / this.shakeDuration)))));
      (this.Camera$Origin$value = $T03().op_Addition(this.Camera$Origin$value, this.shakeOffset));
    }
    this.position.X += +((($T04().$Cast(((this.Camera$Focus$value.get_X() + ((this.Camera$Focus$value.Entity$Width$value / 2) | 0)) | 0)) - this.position.X) * 4) * elapsed);
    this.position.Y += +((($T04().$Cast(((this.Camera$Focus$value.get_Y() + ((this.Camera$Focus$value.Entity$Height$value / 2) | 0)) | 0)) - this.position.Y) * 4) * elapsed);
    if ($T07().op_Inequality(this.Camera$Bounds$value, $T07().get_Empty())) {
      this.position = $T03().Clamp(
        this.position.MemberwiseClone(), 
        $S00().Construct(($T04().$Cast(this.Camera$Bounds$value.get_Left()) + this.Camera$Origin$value.X), ($T04().$Cast(this.Camera$Bounds$value.get_Top()) + this.Camera$Origin$value.Y)), 
        $S00().Construct(($T04().$Cast(this.Camera$Bounds$value.get_Right()) - this.Camera$Origin$value.X), ($T04().$Cast(this.Camera$Bounds$value.get_Bottom()) - this.Camera$Origin$value.Y))
      ).MemberwiseClone();
    }
  };

  JSIL.MakeClass($asm06.TypeRef("System.Object"), "BulletHell.Engine.Camera", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.Game")], []), 
      Camera__ctor
    );

    $.Method({Static:false, Public:true }, "get_Bounds", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), [], []), 
      Camera_get_Bounds
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Focus", 
      new JSIL.MethodSignature($asm00.TypeRef("BulletHell.Engine.Entity"), [], []), 
      Camera_get_Focus
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Height", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Camera_get_Height
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_NewScale", 
      new JSIL.MethodSignature($.Single, [], []), 
      Camera_get_NewScale
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Origin", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], []), 
      Camera_get_Origin
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Position", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], []), 
      Camera_get_Position
    );

    $.Method({Static:false, Public:true }, "get_Rotation", 
      new JSIL.MethodSignature($.Single, [], []), 
      Camera_get_Rotation
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Scale", 
      new JSIL.MethodSignature($.Single, [], []), 
      Camera_get_Scale
    );

    $.Method({Static:false, Public:true }, "get_Transform", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Matrix"), [], []), 
      Camera_get_Transform
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Width", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Camera_get_Width
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_X", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Camera_get_X
    );

    $.Method({Static:false, Public:true }, "get_Y", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Camera_get_Y
    );

    $.Method({Static:false, Public:true }, "ResetViewport", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Viewport")], []), 
      Camera_ResetViewport
    );

    $.Method({Static:false, Public:true }, "set_Bounds", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")], []), 
      Camera_set_Bounds
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Focus", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BulletHell.Engine.Entity")], []), 
      Camera_set_Focus
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Height", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      Camera_set_Height
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_NewScale", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Camera_set_NewScale
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Origin", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      Camera_set_Origin
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      Camera_set_Position
    );

    $.Method({Static:false, Public:true }, "set_Rotation", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Camera_set_Rotation
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Scale", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Camera_set_Scale
    );

    $.Method({Static:false, Public:true }, "set_Transform", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], []), 
      Camera_set_Transform
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Width", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      Camera_set_Width
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "Shake", 
      new JSIL.MethodSignature(null, [$.Single, $.Single], []), 
      Camera_Shake
    );

    $.Method({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Camera_Update
    );

    $.Field({Static:false, Public:false}, "position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "scale", $.Single); 
    $.Field({Static:false, Public:false}, "center", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "shaking", $.Boolean); 
    $.Field({Static:false, Public:false}, "shakeMagnitude", $.Single); 
    $.Field({Static:false, Public:false}, "shakeDuration", $.Single); 
    $.Field({Static:false, Public:false}, "shakeTimer", $.Single); 
    $.Field({Static:false, Public:false}, "shakeOffset", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "Camera$Width$value", $.Int32)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Camera$Height$value", $.Int32)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Camera$Origin$value", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Camera$NewScale$value", $.Single)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Camera$Rotation$value", $.Single)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Camera$Transform$value", $asm01.TypeRef("Microsoft.Xna.Framework.Matrix"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Camera$Focus$value", $asm00.TypeRef("BulletHell.Engine.Entity"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Camera$Bounds$value", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    $.Property({Static:false, Public:true }, "X", $.Int32);

    $.Property({Static:false, Public:true }, "Y", $.Int32);

    $.Property({Static:false, Public:true }, "Origin", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Scale", $.Single);

    $.Property({Static:false, Public:true }, "NewScale", $.Single);

    $.Property({Static:false, Public:true }, "Rotation", $.Single);

    $.Property({Static:false, Public:true }, "Transform", $asm01.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Property({Static:false, Public:true }, "Focus", $asm00.TypeRef("BulletHell.Engine.Entity"));

    $.Property({Static:false, Public:true }, "Bounds", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "BulletHell.Engine.Direction", true, {
    Left: 0, 
    Right: 1, 
    Up: 2, 
    Down: 3
  }, false
);

(function Enemy$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.BulletHell.Engine.Entity)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.BulletHell.Engine.Util)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Vector2))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.BulletHell.Engine.Pathfinder)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.BulletHell.Engine.Level)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.BulletHell.Engine.Tile)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };

  function Enemy__ctor$00 (texture) {
    this.pathElapsed = +0;
    this.pathTimeToCheck = +1;
    $T01().prototype._ctor.call(this, texture);
    this.Entity$Width$value = 32;
    this.Entity$Height$value = 32;
    this.Entity$XOffset$value = ((((texture.get_Width() - this.Entity$Width$value) | 0) / 2) | 0);
    this.Entity$YOffset$value = ((((texture.get_Height() - this.Entity$Height$value) | 0) / 2) | 0);
    this.Enemy$Speed$value = +$T02().$Cast($T03().Next(100, 200));
  };

  function Enemy_Draw (spriteBatch) {
    $T01().prototype.Draw.call(this, spriteBatch);
  };

  function Enemy_get_Path () {
    return this.Enemy$Path$value;
  };

  function Enemy_get_Speed () {
    return +this.Enemy$Speed$value;
  };

  function Enemy_get_Target () {
    return this.Enemy$Target$value;
  };

  function Enemy_set_Path (value) {
    this.Enemy$Path$value = value;
  };

  function Enemy_set_Speed (value) {
    this.Enemy$Speed$value = +value;
  };

  function Enemy_set_Target (value) {
    this.Enemy$Target$value = value;
  };

  function Enemy_Update (elapsed) {
    if (this.Enemy$Target$value !== null) {
      if (!this.Entity$CanFly$value) {
        this.pathElapsed += +elapsed;
        if (this.pathElapsed >= this.pathTimeToCheck) {
          this.Enemy$Path$value.Clear();
          this.Enemy$Path$value = this.Entity$Level$value.Level$Pathfinder$value.FindPath(
            new ($T08())(((this.get_X() / $T09().Size) | 0), ((this.get_Y() / $T09().Size) | 0)), 
            new ($T08())(((this.Enemy$Target$value.get_X() / $T09().Size) | 0), ((this.Enemy$Target$value.get_Y() / $T09().Size) | 0))
          );
          this.pathElapsed -= +this.pathTimeToCheck;
        }
        if (this.Enemy$Path$value.get_Count() > 0) {
          var distance = +$T0A().Distance(this.Enemy$Path$value.get_Item(0), this.position);
          if (distance < 5) {
            this.Enemy$Path$value.RemoveAt(0);
            if (this.Enemy$Path$value.get_Count() === 0) {
              this.velocity = $T0A().get_Zero().MemberwiseClone();
            }
          } else {
            var target = $T0A().op_Subtraction(this.Enemy$Path$value.get_Item(0), this.position);
            target.Normalize();
            this.velocity = $T0A().op_MultiplyScalar(target, this.Enemy$Speed$value);
          }
        } else {
          this.velocity = $T0A().get_Zero().MemberwiseClone();
        }
      } else {
        target = $T0A().op_Subtraction(this.Enemy$Target$value.get_Position(), this.position);
        target.Normalize();
        this.velocity = $T0A().op_MultiplyScalar(target, this.Enemy$Speed$value);
      }
    }
    $T01().prototype.Update.call(this, elapsed);
  };

  JSIL.MakeClass($asm00.TypeRef("BulletHell.Engine.Entity"), "BulletHell.Engine.Enemy", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")], []), 
      Enemy__ctor$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")], []), 
      Enemy_Draw
    );

    $.Method({Static:false, Public:true }, "get_Path", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), [], []), 
      Enemy_get_Path
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Speed", 
      new JSIL.MethodSignature($.Single, [], []), 
      Enemy_get_Speed
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Target", 
      new JSIL.MethodSignature($asm00.TypeRef("BulletHell.Engine.Entity"), [], []), 
      Enemy_get_Target
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Path", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")])], []), 
      Enemy_set_Path
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Speed", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Enemy_set_Speed
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Target", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BulletHell.Engine.Entity")], []), 
      Enemy_set_Target
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Enemy_Update
    );

    $.Field({Static:false, Public:false}, "pathElapsed", $.Single); 
    $.Field({Static:false, Public:false}, "pathTimeToCheck", $.Single); 
    $.Field({Static:false, Public:false}, "Enemy$Target$value", $asm00.TypeRef("BulletHell.Engine.Entity"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Enemy$Path$value", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Enemy$Speed$value", $.Single)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Target", $asm00.TypeRef("BulletHell.Engine.Entity"));

    $.Property({Static:false, Public:true }, "Path", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]));

    $.Property({Static:false, Public:true }, "Speed", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "BulletHell.Engine.GameMode", true, {
    Menu: 0, 
    Gameplay: 1, 
    Pause: 2, 
    End: 3
  }, false
);

(function Level$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.BulletHell.Engine.Tile)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.BulletHell.Engine.Util)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.BulletHell.Engine.Pathfinder)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.BulletHell.Engine.Entity))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.BulletHell.Engine.Enemy)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.BulletHell.Engine.Entity)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.BulletHell.Engine.SquareEnemy)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.BulletHell.Engine.Camera)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.BulletHell.Engine.Player)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm00.BulletHell.Engine.Tile))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.BulletHell.Engine.TileType)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("BulletHell.Engine.Entity")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("BulletHell.Engine.Enemy"), [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };

  function Level__ctor (width, height, enemies) {
    this.enemyTimer = +0;
    this.doorSpawned = false;
    this.Level$Width$value = width;
    this.Level$Height$value = height;
    this.Level$NumberOfEnemies$value = enemies;
    this.Level$Complete$value = false;
    this.Level$GoToNextLevel$value = false;
    this.Level$Tiles$value = JSIL.Array.New($T01(), ((width * height) | 0));

    for (var y = 0; y < this.Level$Height$value; y = ((y + 1) | 0)) {

      for (var x = 0; x < this.Level$Width$value; x = ((x + 1) | 0)) {
        (this.Level$Tiles$value[((x + ((y * this.Level$Width$value) | 0)) | 0)].Tile$Color$value = $T02().op_Multiply(
            $T02().get_White().MemberwiseClone(), 
            $T03().NextFloat()
          ).MemberwiseClone());
        (this.Level$Tiles$value[((x + ((y * this.Level$Width$value) | 0)) | 0)].Tile$Color$value = $T02().get_SaddleBrown().MemberwiseClone());
        if (!(!((((x % this.Level$Width$value) | 0) === 0) || 
              (((y % this.Level$Height$value) | 0) === 0) || 
              (x === ((this.Level$Width$value - 1) | 0))) && (y !== ((this.Level$Height$value - 1) | 0)))) {
          (this.Level$Tiles$value[((x + ((y * this.Level$Width$value) | 0)) | 0)].Tile$Color$value = $T02().get_Black().MemberwiseClone());
        } else if ($T03().NextDouble() < 0.1) {
          (this.Level$Tiles$value[((x + ((y * this.Level$Width$value) | 0)) | 0)].Tile$Color$value = $T02().get_Black().MemberwiseClone());
        }
      }
    }
    this.Level$Pathfinder$value = new ($T04())(this);
    this.Level$Entities$value = $S00().Construct();
  };

  function Level_AddEnemy () {
    if ($T03().NextDouble() > 0.5) {
      var e = $S01().Construct($T03().OctoTexture);
      (e.Entity$Color$value = $T02().get_Brown().MemberwiseClone());
    } else {
      e = new ($T08())();
    }
    var x = $T03().Next(1, this.Level$Width$value);
    var y = $T03().Next(1, this.Level$Height$value);
    if (!this.GetTile(x, y).IsSolid()) {
      (e.Position = $S02().Construct($T0A().$Cast(((x * $T01().Size) | 0)), $T0A().$Cast(((y * $T01().Size) | 0))));
      e.Enemy$Path$value = this.Level$Pathfinder$value.FindPath(
        new ($T0B())(((e.get_X() / $T01().Size) | 0), ((e.get_Y() / $T01().Size) | 0)), 
        new ($T0B())(((this.Level$Player$value.get_X() / $T01().Size) | 0), ((this.Level$Player$value.get_Y() / $T01().Size) | 0))
      );
      e.Enemy$Target$value = this.Level$Player$value;
      this.AddEntity(e);
      var result = true;
    } else {
      result = false;
    }
    return result;
  };

  function Level_AddEntity (e) {
    this.Level$Entities$value.Add(e);
    e.Entity$Level$value = this;
  };

  function Level_Draw (spriteBatch) {
    var $temp00, $temp01;
    $temp01 = new ($T0E())();
    spriteBatch.DrawRect($T03().Texture, new ($T0E())(0, 0, ((this.Level$Width$value * $T01().Size) | 0), ((this.Level$Height$value * $T01().Size) | 0)), $T02().get_Black());
    var x = (((($T0A().$Cast(this.Level$Camera$value.get_X()) - this.Level$Camera$value.Camera$Origin$value.X) | 0) / $T01().Size) | 0);
    var y = (((($T0A().$Cast(this.Level$Camera$value.get_Y()) - this.Level$Camera$value.Camera$Origin$value.Y) | 0) / $T01().Size) | 0);
    var x2 = (((($T0A().$Cast(this.Level$Camera$value.get_X()) + this.Level$Camera$value.Camera$Origin$value.X) | 0) / $T01().Size) | 0);
    var y2 = (((($T0A().$Cast(this.Level$Camera$value.get_Y()) + this.Level$Camera$value.Camera$Origin$value.Y) | 0) / $T01().Size) | 0);
    x = ((x - 1) | 0);
    y = ((y - 1) | 0);
    x2 = ((x2 + 1) | 0);
    y2 = ((y2 + 1) | 0);
    if (x < 0) {
      x = 0;
    }
    if (y < 0) {
      y = 0;
    }
    if (x2 > this.Level$Width$value) {
      x2 = this.Level$Width$value;
    }
    if (y2 > this.Level$Height$value) {
      y2 = this.Level$Height$value;
    }

    for (var y3 = y; y3 < y2; y3 = ((y3 + 1) | 0)) {

      for (var x3 = x; x3 < x2; x3 = ((x3 + 1) | 0)) {
        var t = this.GetTile(x3, y3).MemberwiseClone();
        spriteBatch.DrawRect($T03().Texture, ($temp01._ctor(((x3 * $T01().Size) | 0), ((y3 * $T01().Size) | 0), $T01().Size, $T01().Size), 
            $temp01), t.Tile$Color$value);
      }
    }

    for (var a$0 = this.Level$Entities$value._items, i$0 = 0, l$0 = this.Level$Entities$value._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var e = a$0[i$0];
      e.Draw(spriteBatch);
    }
  };

  function Level_get_Camera () {
    return this.Level$Camera$value;
  };

  function Level_get_Complete () {
    return this.Level$Complete$value;
  };

  function Level_get_Entities () {
    return this.Level$Entities$value;
  };

  function Level_get_ExitTile () {
    return this.Level$ExitTile$value;
  };

  function Level_get_GoToNextLevel () {
    return this.Level$GoToNextLevel$value;
  };

  function Level_get_Height () {
    return this.Level$Height$value;
  };

  function Level_get_NumberOfEnemies () {
    return this.Level$NumberOfEnemies$value;
  };

  function Level_get_Pathfinder () {
    return this.Level$Pathfinder$value;
  };

  function Level_get_Player () {
    return this.Level$Player$value;
  };

  function Level_get_Tiles () {
    return this.Level$Tiles$value;
  };

  function Level_get_Width () {
    return this.Level$Width$value;
  };

  function Level_GetTile (x, y) {
    if (!(!((x < 0) || 
          (y < 0) || 
          (x >= this.Level$Width$value)) && (y < this.Level$Height$value))) {
      var result = this.Level$Tiles$value[0].MemberwiseClone();
    } else {
      result = this.Level$Tiles$value[((x + ((y * this.Level$Width$value) | 0)) | 0)].MemberwiseClone();
    }
    return result;
  };

  function Level_Initialize () {

    for (var i = 0; i < this.Level$NumberOfEnemies$value; i = ((i + 1) | 0)) {

    $loop1: 
      for (var j = 0; j < 100; j = ((j + 1) | 0)) {
        if (this.AddEnemy()) {
          break $loop1;
        }
      }
    }
  };

  function Level_set_Camera (value) {
    this.Level$Camera$value = value;
  };

  function Level_set_Complete (value) {
    this.Level$Complete$value = value;
  };

  function Level_set_Entities (value) {
    this.Level$Entities$value = value;
  };

  function Level_set_ExitTile (value) {
    this.Level$ExitTile$value = value;
  };

  function Level_set_GoToNextLevel (value) {
    this.Level$GoToNextLevel$value = value;
  };

  function Level_set_Height (value) {
    this.Level$Height$value = value;
  };

  function Level_set_NumberOfEnemies (value) {
    this.Level$NumberOfEnemies$value = value;
  };

  function Level_set_Pathfinder (value) {
    this.Level$Pathfinder$value = value;
  };

  function Level_set_Player (value) {
    this.Level$Player$value = value;
  };

  function Level_set_Tiles (value) {
    this.Level$Tiles$value = value;
  };

  function Level_set_Width (value) {
    this.Level$Width$value = value;
  };

  function Level_SpawnDoor () {
    var x = $T03().Next(1, this.Level$Width$value);
    var y = $T03().Next(1, this.Level$Height$value);

  $loop0: 
    for (var i = 0; i < 200; i = ((i + 1) | 0)) {
      if (!this.GetTile(x, y).IsSolid()) {
        this.Level$Tiles$value[((x + ((y * this.Level$Width$value) | 0)) | 0)].Tile$Type$value = $T12().Exit;
        (this.Level$Tiles$value[((x + ((y * this.Level$Width$value) | 0)) | 0)].Tile$Color$value = $T02().get_Red().MemberwiseClone());
        (this.Level$ExitTile$value = new ($T0E())(((x * $T01().Size) | 0), ((y * $T01().Size) | 0), $T01().Size, $T01().Size));
        this.doorSpawned = true;
        break $loop0;
      }
      x = $T03().Next(3, ((this.Level$Width$value - 2) | 0));
      y = $T03().Next(3, ((this.Level$Height$value - 1) | 0));
    }
  };

  function Level_Update (elapsed) {
    this.enemyTimer += +elapsed;
    if (!((this.enemyTimer <= 3) || ($T03().NextDouble() >= elapsed))) {
      this.enemyTimer = +0;
    }

    for (var i = 0; i < this.Level$Entities$value.get_Count(); i = ((i + 1) | 0)) {
      this.Level$Entities$value.get_Item(i).Update(elapsed);
      if (this.Level$Entities$value.get_Item(i).Entity$CanRemove$value) {
        if ($T06().$Is(this.Level$Entities$value.get_Item(i))) {
          this.Level$NumberOfEnemies$value = ((this.Level$NumberOfEnemies$value - 1) | 0);
        }
        this.Level$Entities$value.RemoveAt(i);
        i = ((i - 1) | 0);
      }
    }
    this.Level$Camera$value.Update(elapsed);
    if (!((this.Level$NumberOfEnemies$value !== 0) || this.doorSpawned)) {
      this.SpawnDoor();
      this.Level$Complete$value = true;
    }
  };

  JSIL.MakeClass($asm06.TypeRef("System.Object"), "BulletHell.Engine.Level", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ], []), 
      Level__ctor
    );

    $.Method({Static:false, Public:true }, "AddEnemy", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Level_AddEnemy
    );

    $.Method({Static:false, Public:true }, "AddEntity", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BulletHell.Engine.Entity")], []), 
      Level_AddEntity
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")], []), 
      Level_Draw
    );

    $.Method({Static:false, Public:true }, "get_Camera", 
      new JSIL.MethodSignature($asm00.TypeRef("BulletHell.Engine.Camera"), [], []), 
      Level_get_Camera
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Complete", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Level_get_Complete
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Entities", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("BulletHell.Engine.Entity")]), [], []), 
      Level_get_Entities
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ExitTile", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), [], []), 
      Level_get_ExitTile
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_GoToNextLevel", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Level_get_GoToNextLevel
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Height", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Level_get_Height
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_NumberOfEnemies", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Level_get_NumberOfEnemies
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Pathfinder", 
      new JSIL.MethodSignature($asm00.TypeRef("BulletHell.Engine.Pathfinder"), [], []), 
      Level_get_Pathfinder
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Player", 
      new JSIL.MethodSignature($asm00.TypeRef("BulletHell.Engine.Player"), [], []), 
      Level_get_Player
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Tiles", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("BulletHell.Engine.Tile")]), [], []), 
      Level_get_Tiles
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Width", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Level_get_Width
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetTile", 
      new JSIL.MethodSignature($asm00.TypeRef("BulletHell.Engine.Tile"), [$.Int32, $.Int32], []), 
      Level_GetTile
    );

    $.Method({Static:false, Public:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], []), 
      Level_Initialize
    );

    $.Method({Static:false, Public:true }, "set_Camera", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BulletHell.Engine.Camera")], []), 
      Level_set_Camera
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Complete", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      Level_set_Complete
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Entities", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("BulletHell.Engine.Entity")])], []), 
      Level_set_Entities
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ExitTile", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")], []), 
      Level_set_ExitTile
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_GoToNextLevel", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      Level_set_GoToNextLevel
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Height", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      Level_set_Height
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_NumberOfEnemies", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      Level_set_NumberOfEnemies
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Pathfinder", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BulletHell.Engine.Pathfinder")], []), 
      Level_set_Pathfinder
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Player", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BulletHell.Engine.Player")], []), 
      Level_set_Player
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Tiles", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("BulletHell.Engine.Tile")])], []), 
      Level_set_Tiles
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Width", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      Level_set_Width
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "SpawnDoor", 
      new JSIL.MethodSignature(null, [], []), 
      Level_SpawnDoor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Level_Update
    );

    $.Field({Static:false, Public:false}, "enemyTimer", $.Single); 
    $.Field({Static:false, Public:false}, "doorSpawned", $.Boolean); 
    $.Field({Static:false, Public:false}, "Level$Camera$value", $asm00.TypeRef("BulletHell.Engine.Camera"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Level$Pathfinder$value", $asm00.TypeRef("BulletHell.Engine.Pathfinder"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Level$Width$value", $.Int32)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Level$Height$value", $.Int32)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Level$Tiles$value", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("BulletHell.Engine.Tile")]))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Level$Entities$value", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("BulletHell.Engine.Entity")]))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Level$Player$value", $asm00.TypeRef("BulletHell.Engine.Player"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Level$NumberOfEnemies$value", $.Int32)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Level$Complete$value", $.Boolean)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Level$GoToNextLevel$value", $.Boolean)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Level$ExitTile$value", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Camera", $asm00.TypeRef("BulletHell.Engine.Camera"));

    $.Property({Static:false, Public:true }, "Pathfinder", $asm00.TypeRef("BulletHell.Engine.Pathfinder"));

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    $.Property({Static:false, Public:true }, "Tiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("BulletHell.Engine.Tile")]));

    $.Property({Static:false, Public:true }, "Entities", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("BulletHell.Engine.Entity")]));

    $.Property({Static:false, Public:true }, "Player", $asm00.TypeRef("BulletHell.Engine.Player"));

    $.Property({Static:false, Public:true }, "NumberOfEnemies", $.Int32);

    $.Property({Static:false, Public:true }, "Complete", $.Boolean);

    $.Property({Static:false, Public:true }, "GoToNextLevel", $.Boolean);

    $.Property({Static:false, Public:true }, "ExitTile", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SearchNode$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm00.BulletHell.Engine.SearchNode))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };

  function SearchNode__ctor () {
  };

  function SearchNode_get_DistanceToGoal () {
    return +this.SearchNode$DistanceToGoal$value;
  };

  function SearchNode_get_DistanceTraveled () {
    return +this.SearchNode$DistanceTraveled$value;
  };

  function SearchNode_get_InClosedList () {
    return this.SearchNode$InClosedList$value;
  };

  function SearchNode_get_InOpenList () {
    return this.SearchNode$InOpenList$value;
  };

  function SearchNode_get_Neighbors () {
    return this.SearchNode$Neighbors$value;
  };

  function SearchNode_get_Parent () {
    return this.SearchNode$Parent$value;
  };

  function SearchNode_get_Position () {
    return this.SearchNode$Position$value;
  };

  function SearchNode_get_Walkable () {
    return this.SearchNode$Walkable$value;
  };

  function SearchNode_set_DistanceToGoal (value) {
    this.SearchNode$DistanceToGoal$value = +value;
  };

  function SearchNode_set_DistanceTraveled (value) {
    this.SearchNode$DistanceTraveled$value = +value;
  };

  function SearchNode_set_InClosedList (value) {
    this.SearchNode$InClosedList$value = value;
  };

  function SearchNode_set_InOpenList (value) {
    this.SearchNode$InOpenList$value = value;
  };

  function SearchNode_set_Neighbors (value) {
    this.SearchNode$Neighbors$value = value;
  };

  function SearchNode_set_Parent (value) {
    this.SearchNode$Parent$value = value;
  };

  function SearchNode_set_Position (value) {
    this.SearchNode$Position$value = value;
  };

  function SearchNode_set_Walkable (value) {
    this.SearchNode$Walkable$value = value;
  };

  JSIL.MakeClass($asm06.TypeRef("System.Object"), "BulletHell.Engine.SearchNode", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      SearchNode__ctor
    );

    $.Method({Static:false, Public:true }, "get_DistanceToGoal", 
      new JSIL.MethodSignature($.Single, [], []), 
      SearchNode_get_DistanceToGoal
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_DistanceTraveled", 
      new JSIL.MethodSignature($.Single, [], []), 
      SearchNode_get_DistanceTraveled
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_InClosedList", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      SearchNode_get_InClosedList
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_InOpenList", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      SearchNode_get_InOpenList
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Neighbors", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [], []), 
      SearchNode_get_Neighbors
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Parent", 
      new JSIL.MethodSignature($.Type, [], []), 
      SearchNode_get_Parent
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Position", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Point"), [], []), 
      SearchNode_get_Position
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Walkable", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      SearchNode_get_Walkable
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_DistanceToGoal", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SearchNode_set_DistanceToGoal
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_DistanceTraveled", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SearchNode_set_DistanceTraveled
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_InClosedList", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      SearchNode_set_InClosedList
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_InOpenList", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      SearchNode_set_InOpenList
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Neighbors", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Type])], []), 
      SearchNode_set_Neighbors
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Parent", 
      new JSIL.MethodSignature(null, [$.Type], []), 
      SearchNode_set_Parent
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Point")], []), 
      SearchNode_set_Position
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Walkable", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      SearchNode_set_Walkable
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SearchNode$Position$value", $asm01.TypeRef("Microsoft.Xna.Framework.Point"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SearchNode$Walkable$value", $.Boolean)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SearchNode$Neighbors$value", $jsilcore.TypeRef("System.Array", [$.Type]))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SearchNode$Parent$value", $.Type)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SearchNode$InOpenList$value", $.Boolean)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SearchNode$InClosedList$value", $.Boolean)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SearchNode$DistanceToGoal$value", $.Single)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SearchNode$DistanceTraveled$value", $.Single)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Position", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Property({Static:false, Public:true }, "Walkable", $.Boolean);

    $.Property({Static:false, Public:true }, "Neighbors", $jsilcore.TypeRef("System.Array", [$.Type]));

    $.Property({Static:false, Public:true }, "Parent", $.Type);

    $.Property({Static:false, Public:true }, "InOpenList", $.Boolean);

    $.Property({Static:false, Public:true }, "InClosedList", $.Boolean);

    $.Property({Static:false, Public:true }, "DistanceToGoal", $.Single);

    $.Property({Static:false, Public:true }, "DistanceTraveled", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Pathfinder$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.BulletHell.Engine.Level)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.BulletHell.Engine.SearchNode))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.BulletHell.Engine.SearchNode)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Vector2))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.BulletHell.Engine.Tile)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm00.BulletHell.Engine.SearchNode))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Void)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Point))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("BulletHell.Engine.SearchNode")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };

  function Pathfinder__ctor (level) {
    this.openList = $S00().Construct();
    this.closedList = $S00().Construct();
    this.Pathfinder$Width$value = level.Level$Width$value;
    this.Pathfinder$Height$value = level.Level$Height$value;
    this.InitializeSearchNodes(level);
  };

  function Pathfinder_FindBestNode () {
    var currentTile = this.openList.get_Item(0);
    var smallestDistanceToGoal = +3.40282347E+38;

    for (var i = 0; i < this.openList.get_Count(); i = ((i + 1) | 0)) {
      if (this.openList.get_Item(i).SearchNode$DistanceToGoal$value < smallestDistanceToGoal) {
        currentTile = this.openList.get_Item(i);
        smallestDistanceToGoal = +currentTile.SearchNode$DistanceToGoal$value;
      }
    }
    return currentTile;
  };

  function Pathfinder_FindFinalPath (startNode, endNode) {
    this.closedList.Add(endNode);

    for (var parentTile = endNode.SearchNode$Parent$value; parentTile !== startNode; parentTile = parentTile.SearchNode$Parent$value) {
      this.closedList.Add(parentTile);
    }
    var finalPath = $S01().Construct();

    for (var i = ((this.closedList.get_Count() - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
      finalPath.Add($S02().Construct($T03().$Cast(((this.closedList.get_Item(i).SearchNode$Position$value.X * $T07().Size) | 0)), $T03().$Cast(((this.closedList.get_Item(i).SearchNode$Position$value.Y * $T07().Size) | 0))));
    }
    return finalPath;
  };

  function Pathfinder_FindPath (startPoint, endPoint) {
    if ($T08().op_Equality(startPoint, endPoint)) {
      var result = $S01().Construct();
    } else {
      this.ResetSearchNodes();
      var startNode = this.searchNodes[((startPoint.X + ((startPoint.Y * this.Pathfinder$Width$value) | 0)) | 0)];
      var endNode = this.searchNodes[((endPoint.X + ((endPoint.Y * this.Pathfinder$Width$value) | 0)) | 0)];
      if (!((startNode !== null) && (endNode !== null))) {
        result = $S01().Construct();
      } else {
        startNode.SearchNode$InOpenList$value = true;
        startNode.SearchNode$DistanceToGoal$value = +this.Heuristic(startPoint.MemberwiseClone(), endPoint.MemberwiseClone());
        startNode.SearchNode$DistanceTraveled$value = +0;
        this.openList.Add(startNode);

      $loop0: 
        while (this.openList.get_Count() > 0) {
          var currentNode = this.FindBestNode();
          if (currentNode === null) {
            break $loop0;
          }
          if (currentNode === endNode) {
            result = this.FindFinalPath(startNode, endNode);
            return result;
          }

          for (var i = 0; i < currentNode.SearchNode$Neighbors$value.length; i = ((i + 1) | 0)) {
            var neighbor = currentNode.SearchNode$Neighbors$value[i];
            if ((neighbor !== null) && neighbor.SearchNode$Walkable$value) {
              var distanceTraveled = +(currentNode.SearchNode$DistanceTraveled$value + 1);
              var heuristic = +this.Heuristic(neighbor.SearchNode$Position$value.MemberwiseClone(), endPoint.MemberwiseClone());
              if (!(neighbor.SearchNode$InOpenList$value || neighbor.SearchNode$InClosedList$value)) {
                neighbor.SearchNode$DistanceTraveled$value = +distanceTraveled;
                neighbor.SearchNode$DistanceToGoal$value = +(distanceTraveled + heuristic);
                neighbor.SearchNode$Parent$value = currentNode;
                neighbor.SearchNode$InOpenList$value = true;
                this.openList.Add(neighbor);
              } else if (!(!neighbor.SearchNode$InOpenList$value && !neighbor.SearchNode$InClosedList$value)) {
                if (neighbor.SearchNode$DistanceTraveled$value > distanceTraveled) {
                  neighbor.SearchNode$DistanceTraveled$value = +distanceTraveled;
                  neighbor.SearchNode$DistanceToGoal$value = +(distanceTraveled + heuristic);
                  neighbor.SearchNode$Parent$value = currentNode;
                }
              }
            }
          }
          this.openList.Remove(currentNode);
          currentNode.SearchNode$InClosedList$value = true;
        }
        result = $S01().Construct();
      }
    }
    return result;
  };

  function Pathfinder_get_Height () {
    return this.Pathfinder$Height$value;
  };

  function Pathfinder_get_Width () {
    return this.Pathfinder$Width$value;
  };

  function Pathfinder_Heuristic (point1, point2) {
    return +$T03().$Cast((((Math.abs(((point1.X - point2.X) | 0))) + (Math.abs(((point1.Y - point2.Y) | 0)))) | 0));
  };

  function Pathfinder_InitializeSearchNodes (level) {
    this.searchNodes = JSIL.Array.New($T02(), ((this.Pathfinder$Width$value * this.Pathfinder$Height$value) | 0));

    for (var y = 0; y < this.Pathfinder$Height$value; y = ((y + 1) | 0)) {

      for (var x = 0; x < this.Pathfinder$Width$value; x = ((x + 1) | 0)) {
        var node = new ($T02())();
        (node.SearchNode$Position$value = new ($T08())(x, y));
        node.SearchNode$Walkable$value = !level.GetTile(x, y).IsSolid();
        if (node.SearchNode$Walkable$value) {
          node.SearchNode$Neighbors$value = JSIL.Array.New($T02(), 4);
          this.searchNodes[((x + ((y * this.Pathfinder$Width$value) | 0)) | 0)] = node;
        }
      }
    }

    for (y = 0; y < this.Pathfinder$Height$value; y = ((y + 1) | 0)) {

      for (x = 0; x < this.Pathfinder$Width$value; x = ((x + 1) | 0)) {
        node = this.searchNodes[((x + ((y * this.Pathfinder$Width$value) | 0)) | 0)];
        if ((node !== null) && node.SearchNode$Walkable$value) {
          var neighbors = JSIL.Array.New($T08(), [new ($T08())(x, ((y - 1) | 0)), new ($T08())(x, ((y + 1) | 0)), new ($T08())(((x - 1) | 0), y), new ($T08())(((x + 1) | 0), y)]);

          for (var i = 0; i < neighbors.length; i = ((i + 1) | 0)) {
            var position = neighbors[i].MemberwiseClone();
            if (!((position.X < 0) || 
                (position.X >= this.Pathfinder$Width$value) || 
                (position.Y < 0)) && (position.Y < this.Pathfinder$Height$value)) {
              var neighbor = this.searchNodes[((position.X + ((position.Y * this.Pathfinder$Width$value) | 0)) | 0)];
              if ((neighbor !== null) && neighbor.SearchNode$Walkable$value) {
                node.SearchNode$Neighbors$value[i] = neighbor;
              }
            }
          }
        }
      }
    }
  };

  function Pathfinder_ResetSearchNodes () {
    this.openList.Clear();
    this.closedList.Clear();

    for (var y = 0; y < this.Pathfinder$Height$value; y = ((y + 1) | 0)) {

      for (var x = 0; x < this.Pathfinder$Width$value; x = ((x + 1) | 0)) {
        var node = this.searchNodes[((x + ((y * this.Pathfinder$Width$value) | 0)) | 0)];
        if (node !== null) {
          node.SearchNode$InOpenList$value = false;
          node.SearchNode$InClosedList$value = false;
          node.SearchNode$DistanceTraveled$value = +3.40282347E+38;
          node.SearchNode$DistanceToGoal$value = +3.40282347E+38;
        }
      }
    }
  };

  function Pathfinder_set_Height (value) {
    this.Pathfinder$Height$value = value;
  };

  function Pathfinder_set_Width (value) {
    this.Pathfinder$Width$value = value;
  };

  JSIL.MakeClass($asm06.TypeRef("System.Object"), "BulletHell.Engine.Pathfinder", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BulletHell.Engine.Level")], []), 
      Pathfinder__ctor
    );

    $.Method({Static:false, Public:false}, "FindBestNode", 
      new JSIL.MethodSignature($asm00.TypeRef("BulletHell.Engine.SearchNode"), [], []), 
      Pathfinder_FindBestNode
    );

    $.Method({Static:false, Public:false}, "FindFinalPath", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), [$asm00.TypeRef("BulletHell.Engine.SearchNode"), $asm00.TypeRef("BulletHell.Engine.SearchNode")], []), 
      Pathfinder_FindFinalPath
    );

    $.Method({Static:false, Public:true }, "FindPath", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), [$asm01.TypeRef("Microsoft.Xna.Framework.Point"), $asm01.TypeRef("Microsoft.Xna.Framework.Point")], []), 
      Pathfinder_FindPath
    );

    $.Method({Static:false, Public:true }, "get_Height", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Pathfinder_get_Height
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Width", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Pathfinder_get_Width
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "Heuristic", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Point"), $asm01.TypeRef("Microsoft.Xna.Framework.Point")], []), 
      Pathfinder_Heuristic
    );

    $.Method({Static:false, Public:false}, "InitializeSearchNodes", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BulletHell.Engine.Level")], []), 
      Pathfinder_InitializeSearchNodes
    );

    $.Method({Static:false, Public:false}, "ResetSearchNodes", 
      new JSIL.MethodSignature(null, [], []), 
      Pathfinder_ResetSearchNodes
    );

    $.Method({Static:false, Public:true }, "set_Height", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      Pathfinder_set_Height
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Width", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      Pathfinder_set_Width
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "searchNodes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("BulletHell.Engine.SearchNode")])); 
    $.Field({Static:false, Public:false}, "openList", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("BulletHell.Engine.SearchNode")])); 
    $.Field({Static:false, Public:false}, "closedList", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("BulletHell.Engine.SearchNode")])); 
    $.Field({Static:false, Public:false}, "Pathfinder$Width$value", $.Int32)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Pathfinder$Height$value", $.Int32)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Player$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.BulletHell.Engine.Entity)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.BulletHell.Engine.Bullet))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.BulletHell.Engine.Bullet)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.BulletHell.Engine.Direction)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.BulletHell.Engine.Level)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.BulletHell.Engine.Tile)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("BulletHell.Engine.Bullet")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };

  function Player__ctor (texture) {
    this.shootTimer = +0;
    $T01().prototype._ctor.call(this, texture);
    this.Entity$Width$value = 48;
    this.Entity$Height$value = 60;
    this.Entity$XOffset$value = ((((texture.get_Width() - this.Entity$Width$value) | 0) / 2) | 0);
    this.Entity$YOffset$value = ((((texture.get_Height() - this.Entity$Height$value) | 0) / 2) | 0);
    this.Player$ShootDelay$value = +0.2;
    this.Player$Bullets$value = $S00().Construct();
  };

  function Player_Draw (spriteBatch) {
    var $temp00;
    $T01().prototype.Draw.call(this, spriteBatch);

    for (var a$0 = this.Player$Bullets$value._items, i$0 = 0, l$0 = this.Player$Bullets$value._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var b = a$0[i$0];
      b.Draw(spriteBatch);
    }
  };

  function Player_get_Bullets () {
    return this.Player$Bullets$value;
  };

  function Player_get_CollisionBox () {
    return new ($T05())(this.get_X(), this.get_Y(), this.Entity$Width$value, this.Entity$Height$value);
  };

  function Player_get_ShootDelay () {
    return +this.Player$ShootDelay$value;
  };

  function Player_set_Bullets (value) {
    this.Player$Bullets$value = value;
  };

  function Player_set_ShootDelay (value) {
    this.Player$ShootDelay$value = +value;
  };

  function Player_Shoot (d) {
    if (this.shootTimer <= 0) {
      var b = new ($T04())();
      (b.Position = this.position.MemberwiseClone());
      switch (d.valueOf()) {
        case 0: 
          (b.Velocity = $S01().Construct(-1, 0));
          break;

        case 1: 
          (b.Velocity = $S01().Construct(1, 0));
          break;

        case 2: 
          (b.Velocity = $S01().Construct(0, -1));
          break;

        case 3: 
          (b.Velocity = $S01().Construct(0, 1));
          break;

      }
      this.Player$Bullets$value.Add(b);
      this.shootTimer += +this.Player$ShootDelay$value;
    }
  };

  function Player_Update (elapsed) {
    var $temp00;
    if (this.shootTimer > 0) {
      this.shootTimer -= +elapsed;
    }

    for (var i = 0; i < this.Player$Bullets$value.get_Count(); i = ((i + 1) | 0)) {
      this.Player$Bullets$value.get_Item(i).Update(elapsed);

      for (var a$0 = this.Entity$Level$value.Level$Entities$value._items, i$0 = 0, l$0 = this.Entity$Level$value.Level$Entities$value._size; i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var e = a$0[i$0];
        if (this.Player$Bullets$value.get_Item(i).get_CollisionBox().Intersects(e.get_CollisionBox())) {
          this.Player$Bullets$value.get_Item(i).OnCollide(e);
        }
      }
      if (this.Entity$Level$value.GetTile(
          ((this.Player$Bullets$value.get_Item(i).get_X() / $T0B().Size) | 0), 
          ((this.Player$Bullets$value.get_Item(i).get_Y() / $T0B().Size) | 0)
        ).IsSolid()) {
        this.Player$Bullets$value.get_Item(i).Bullet$IsActive$value = false;
      }
      if (!this.Player$Bullets$value.get_Item(i).Bullet$IsActive$value) {
        this.Player$Bullets$value.RemoveAt(i);
        i = ((i - 1) | 0);
      }
    }
    if (!(!this.Entity$Level$value.Level$Complete$value || !this.get_CollisionBox().Intersects(this.Entity$Level$value.Level$ExitTile$value))) {
      this.Entity$Level$value.Level$GoToNextLevel$value = true;
    }
    $T01().prototype.Update.call(this, elapsed);
  };

  JSIL.MakeClass($asm00.TypeRef("BulletHell.Engine.Entity"), "BulletHell.Engine.Player", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")], []), 
      Player__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")], []), 
      Player_Draw
    );

    $.Method({Static:false, Public:true }, "get_Bullets", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("BulletHell.Engine.Bullet")]), [], []), 
      Player_get_Bullets
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_CollisionBox", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), [], []), 
      Player_get_CollisionBox
    );

    $.Method({Static:false, Public:true }, "get_ShootDelay", 
      new JSIL.MethodSignature($.Single, [], []), 
      Player_get_ShootDelay
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Bullets", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("BulletHell.Engine.Bullet")])], []), 
      Player_set_Bullets
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ShootDelay", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Player_set_ShootDelay
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "Shoot", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BulletHell.Engine.Direction")], []), 
      Player_Shoot
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Player_Update
    );

    $.Field({Static:false, Public:false}, "shootTimer", $.Single); 
    $.Field({Static:false, Public:false}, "Player$ShootDelay$value", $.Single)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Player$Bullets$value", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("BulletHell.Engine.Bullet")]))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "ShootDelay", $.Single);

    $.Property({Static:false, Public:true }, "Bullets", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("BulletHell.Engine.Bullet")]));

    $.Property({Static:false, Public:true , Virtual:true }, "CollisionBox", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PowerUp$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.BulletHell.Engine.Entity)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.BulletHell.Engine.Util)) ();
  };

  function PowerUp__ctor () {
    $T00().prototype._ctor.call(this, $T01().Texture);
  };

  JSIL.MakeClass($asm00.TypeRef("BulletHell.Engine.Entity"), "BulletHell.Engine.PowerUp", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      PowerUp__ctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SquareEnemy$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.BulletHell.Engine.Enemy)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.BulletHell.Engine.Util)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.BulletHell.Engine.Entity)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };

  function SquareEnemy__ctor () {
    $T00().prototype._ctor.call(this, $T01().Texture);
    this.Entity$Width$value = 32;
    this.Entity$Height$value = 32;
    this.Entity$XOffset$value = 0;
    this.Entity$YOffset$value = 0;
    this.Entity$CanFly$value = true;
    this.Enemy$Speed$value = +$T03().$Cast($T01().Next(50, 100));
  };

  function SquareEnemy_Draw (spriteBatch) {
    var drawRect = this.get_DrawRectangle();
    spriteBatch.DrawRect(this.Entity$Texture$value, new ($T05())(((((this.position.X) | 0) - this.Entity$XOffset$value) | 0), ((((this.position.Y) | 0) - this.Entity$YOffset$value) | 0), this.Entity$Width$value, this.Entity$Height$value), this.Entity$Color$value);
    $T00().prototype.Draw.call(this, spriteBatch);
  };

  function SquareEnemy_Update (elapsed) {
    $T00().prototype.Update.call(this, elapsed);
  };

  JSIL.MakeClass($asm00.TypeRef("BulletHell.Engine.Enemy"), "BulletHell.Engine.SquareEnemy", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      SquareEnemy__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")], []), 
      SquareEnemy_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SquareEnemy_Update
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "BulletHell.Engine.TileType", true, {
    Empty: 0, 
    Grass: 1, 
    Exit: 2
  }, false
);

(function Tile$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.BulletHell.Engine.TileType)) ();
  };

  function Tile_get_Color () {
    return this.Tile$Color$value;
  };

  function Tile_get_PreviousColor () {
    return this.Tile$PreviousColor$value;
  };

  function Tile_get_Type () {
    return this.Tile$Type$value;
  };

  function Tile_IsSolid () {
    return $T00().op_Equality(this.Tile$Color$value.MemberwiseClone(), $T00().get_Black().MemberwiseClone());
  };

  function Tile_set_Color (value) {
    this.Tile$Color$value = value;
  };

  function Tile_set_PreviousColor (value) {
    this.Tile$PreviousColor$value = value;
  };

  function Tile_set_Type (value) {
    this.Tile$Type$value = value;
  };

  function Tile_SwapColor (c) {
    (this.Tile$PreviousColor$value = this.Tile$Color$value.MemberwiseClone());
    (this.Tile$Color$value = c);
  };

  JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "BulletHell.Engine.Tile", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, "get_Color", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Color"), [], []), 
      Tile_get_Color
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PreviousColor", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Color"), [], []), 
      Tile_get_PreviousColor
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm00.TypeRef("BulletHell.Engine.TileType"), [], []), 
      Tile_get_Type
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "IsSolid", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Tile_IsSolid
    );

    $.Method({Static:false, Public:true }, "set_Color", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Color")], []), 
      Tile_set_Color
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_PreviousColor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Color")], []), 
      Tile_set_PreviousColor
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BulletHell.Engine.TileType")], []), 
      Tile_set_Type
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "SwapColor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Color")], []), 
      Tile_SwapColor
    );

    $.Field({Static:true , Public:true }, "Size", $.Int32, 64); 
    $.Field({Static:false, Public:false}, "Tile$Color$value", $asm01.TypeRef("Microsoft.Xna.Framework.Color"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Tile$PreviousColor$value", $asm01.TypeRef("Microsoft.Xna.Framework.Color"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Tile$Type$value", $asm00.TypeRef("BulletHell.Engine.TileType"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function Tile__cctor () {
      $thisType.Size = 64;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      Tile__cctor
    );

    $.Property({Static:false, Public:true }, "Color", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Property({Static:false, Public:true }, "PreviousColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Property({Static:false, Public:true }, "Type", $asm00.TypeRef("BulletHell.Engine.TileType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Util$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm06.TypeRef("System.Int32"), 
        $asm06.TypeRef("System.Int32")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Random"), []))) ();
  };

  function Util_Initialize (game) {
    $thisType.Texture = $S00().Construct(game.get_GraphicsDevice(), 1, 1);
    $S01().CallVirtual("SetData$b1", [$asm01.Microsoft.Xna.Framework.Color], $thisType.Texture, JSIL.Array.New($T02(), [$T02().get_White()]));
    $thisType.Font = game.get_Content().Load$b1($T03())("Font");
    $thisType.OctoTexture = game.get_Content().Load$b1($T01())("Octocat");
    $thisType.random = $S02().Construct();
  };

  function Util_Next (min, max) {
    return $thisType.random.Next(min, max);
  };

  function Util_NextDouble () {
    return +$thisType.random.NextDouble();
  };

  function Util_NextFloat () {
    return +$T07().$Cast($thisType.random.NextDouble());
  };

  JSIL.MakeStaticClass("BulletHell.Engine.Util", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.Game")], []), 
      Util_Initialize
    );

    $.Method({Static:true , Public:true }, "Next", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], []), 
      Util_Next
    );

    $.Method({Static:true , Public:true }, "NextDouble", 
      new JSIL.MethodSignature($.Double, [], []), 
      Util_NextDouble
    );

    $.Method({Static:true , Public:true }, "NextFloat", 
      new JSIL.MethodSignature($.Single, [], []), 
      Util_NextFloat
    );

    $.Field({Static:true , Public:true }, "Texture", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "OctoTexture", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Font", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")); 
    $.Field({Static:true , Public:true }, "random", $asm06.TypeRef("System.Random")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Program$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm06.System.String))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.BulletHell.Game1)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.IDisposable)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm06.System.IDisposable.Dispose)) ();
  };

  function Program_Main (args) {
    var game = new ($T01())();
    try {
      game.Run();
    } finally {
      if (game !== null) {
        $IM00().Call(game, null);
      }
    }
  };

  JSIL.MakeStaticClass("BulletHell.Program", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "Main", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String])], []), 
      Program_Main
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Game1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.BulletHell.Engine.GameMode)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Text.StringBuilder)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteSortMode)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SamplerState)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.BulletHell.Engine.Camera)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.BulletHell.Engine.Level)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm06.System.Void)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.BulletHell.Engine.Util)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.BulletHell.Engine.Player)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.BulletHell.Engine.Entity)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.BulletHell.Engine.Tile)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.BulletHell.Engine.Bullet))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm06.System.TimeSpan)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keyboard)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Mouse)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Input.Keys))) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize(System.Array.Of($asm00.BulletHell.Engine.Tile))) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm00.BulletHell.Engine.Direction)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Text.StringBuilder"), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };

  function Game1__ctor () {
    this.mode = $T00().Menu;
    this.sb = $S00().Construct();
    this.levelNumber = 1;
    this.width = 20;
    this.height = 11;
    $T02().prototype._ctor.call(this);
    this.graphics = new ($T03())(this);
    this.get_Content().set_RootDirectory("Content");
    this.graphics.set_PreferredBackBufferWidth(1280);
    this.graphics.set_PreferredBackBufferHeight(720);
    this.set_IsMouseVisible(true);
  };

  function Game1_Draw (gameTime) {
    this.get_GraphicsDevice().InternalClear($T07().get_Black());
    switch (this.mode.valueOf()) {
      case 0: 
        this.spriteBatch.Begin();
        this.spriteBatch.DrawScaleF(
          this.titleTexture, 
          $T09().get_Zero(), 
          null, 
          $T07().get_White(), 
          0, 
          $T09().get_Zero(), 
          2, 
          $T0A().None, 
          0
        );
        this.spriteBatch.End();
        break;

      case 1: 
        this.spriteBatch.Begin(
          $T0B().Immediate, 
          null, 
          $T0C().PointClamp, 
          null, 
          null, 
          null, 
          this.camera.Camera$Transform$value.MemberwiseClone()
        );
        this.level.Draw(this.spriteBatch);
        this.spriteBatch.End();
        this.spriteBatch.Begin();
        this.sb.Clear();
        this.sb.AppendLine(JSIL.ConcatString("Level: ", this.levelNumber));
        this.sb.AppendLine(JSIL.ConcatString("Enemies left: ", this.level.Level$NumberOfEnemies$value));
        this.spriteBatch.DrawStringBuilder(
          $T12().Font, 
          this.sb, 
          $T09().get_Zero(), 
          $T07().get_Purple()
        );
        this.spriteBatch.End();
        break;

      case 3: 
        this.spriteBatch.Begin();
        this.spriteBatch.DrawScaleF(
          this.titleTexture, 
          $T09().get_Zero(), 
          null, 
          $T07().get_White(), 
          0, 
          $T09().get_Zero(), 
          2, 
          $T0A().None, 
          0
        );
        this.spriteBatch.End();
        break;

    }
    $T02().prototype.Draw.call(this, gameTime);
  };

  function Game1_Initialize () {
    $T12().Initialize(this);
    this.titleTexture = this.get_Content().Load$b1($T13())("title");
    this.player = new ($T14())(this.get_Content().Load$b1($T13())("Octocat"));
    this.NewLevel(this.width, this.height, 3);
    $T02().prototype.Initialize.call(this);
  };

  function Game1_LoadContent () {
    this.spriteBatch = new ($T08())(this.get_GraphicsDevice());
  };

  function Game1_NewLevel (width, height, enemies) {
    this.level = new ($T0E())(width, height, ((this.levelNumber + 2) | 0));
    this.level.AddEntity(this.player);
    this.level.Level$Player$value = this.player;
    (this.player.Position = $S01().Construct($T16().$Cast(((((((3 * $T17().Size) | 0) + ((this.player.Entity$Width$value / 2) | 0)) | 0) - 16) | 0)), $T16().$Cast(((((((3 * $T17().Size) | 0) - ((this.player.Entity$Height$value / 2) | 0)) | 0) + (($T17().Size / 2) | 0)) | 0))));
    this.player.Player$Bullets$value.Clear();
    this.camera = new ($T0D())(this);
    this.camera.Camera$Focus$value = this.player;
    (this.camera.Camera$Bounds$value = new ($T19())(0, 0, ((this.level.Level$Width$value * $T17().Size) | 0), ((this.level.Level$Height$value * $T17().Size) | 0)));
    this.level.Level$Camera$value = this.camera;
    this.level.Initialize();
  };

  function Game1_UnloadContent () {
  };

  function Game1_Update (gameTime) {
    var elapsed = +$T16().$Cast(gameTime.get_ElapsedGameTime().get_TotalSeconds());
    this.oldKeyboardState = this.keyboardState.MemberwiseClone();
    this.keyboardState = $T1B().GetState().MemberwiseClone();
    this.oldmouseState = this.mouseState.MemberwiseClone();
    this.mouseState = $T1C().GetState().MemberwiseClone();
    switch (this.mode.valueOf()) {
      case 0: 
        if (!(!this.keyboardState.IsKeyDown($T1E().Escape) || !this.oldKeyboardState.IsKeyUp($T1E().Escape))) {
          this.Exit();
        }
        if (!((this.keyboardState.GetPressedKeys().length <= 0) || !this.keyboardState.IsKeyUp($T1E().Escape))) {
          this.mode = $T00().Gameplay;
        }
        break;

      case 1: 
        if (!(!this.keyboardState.IsKeyDown($T1E().Escape) || !this.oldKeyboardState.IsKeyUp($T1E().Escape))) {
          this.mode = $T00().Menu;
        } else {
          (this.player.Velocity = $T09().get_Zero().MemberwiseClone());
          if (!(!this.keyboardState.IsKeyDown($T1E().Space) || !this.oldKeyboardState.IsKeyUp($T1E().Space))) {
            this.level.AddEnemy();

            for (var i = 0; i < this.level.Level$Tiles$value.length; i = ((i + 1) | 0)) {
              if ($T07().op_Equality(this.level.Level$Tiles$value[i].Tile$Color$value.MemberwiseClone(), $T07().get_Black().MemberwiseClone())) {
                (this.level.Level$Tiles$value[i].Tile$Color$value = $T07().get_SaddleBrown().MemberwiseClone());
              } else {
                (this.level.Level$Tiles$value[i].Tile$Color$value = $T07().get_Black().MemberwiseClone());
              }
            }
          }
          if (this.keyboardState.IsKeyDown($T1E().A)) {
            (this.player.Velocity = $S01().Construct(-300, this.player.Velocity.Y));
          } else if (this.keyboardState.IsKeyDown($T1E().E)) {
            (this.player.Velocity = $S01().Construct(300, this.player.Velocity.Y));
          }
          if (this.keyboardState.IsKeyDown($T1E().OemComma)) {
            (this.player.Velocity = $S01().Construct(this.player.Velocity.X, -300));
          } else if (this.keyboardState.IsKeyDown($T1E().O)) {
            (this.player.Velocity = $S01().Construct(this.player.Velocity.X, 300));
          }
          if (this.keyboardState.IsKeyDown($T1E().Left)) {
            this.player.Shoot($T21().Left);
          }
          if (this.keyboardState.IsKeyDown($T1E().Right)) {
            this.player.Shoot($T21().Right);
          }
          if (this.keyboardState.IsKeyDown($T1E().Up)) {
            this.player.Shoot($T21().Up);
          }
          if (this.keyboardState.IsKeyDown($T1E().Down)) {
            this.player.Shoot($T21().Down);
          }
          this.level.Update(elapsed);
          if (this.level.Level$GoToNextLevel$value) {
            this.width = ((this.width + 2) | 0);
            this.height = ((this.height + 2) | 0);
            this.levelNumber = ((this.levelNumber + 1) | 0);
            this.NewLevel(this.width, this.height, ((this.levelNumber + 2) | 0));
          }
        }
        break;

    }
    $T02().prototype.Update.call(this, gameTime);
  };

  JSIL.MakeClass($asm02.TypeRef("Microsoft.Xna.Framework.Game"), "BulletHell.Game1", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Game1__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      Game1_Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], []), 
      Game1_Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "LoadContent", 
      new JSIL.MethodSignature(null, [], []), 
      Game1_LoadContent
    );

    $.Method({Static:false, Public:true }, "NewLevel", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ], []), 
      Game1_NewLevel
    );

    $.Method({Static:false, Public:false, Virtual:true }, "UnloadContent", 
      new JSIL.MethodSignature(null, [], []), 
      Game1_UnloadContent
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      Game1_Update
    );

    $.Field({Static:false, Public:false}, "graphics", $asm02.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager")); 
    $.Field({Static:false, Public:false}, "spriteBatch", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")); 
    $.Field({Static:false, Public:false}, "oldKeyboardState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")); 
    $.Field({Static:false, Public:false}, "keyboardState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")); 
    $.Field({Static:false, Public:false}, "oldmouseState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")); 
    $.Field({Static:false, Public:false}, "mouseState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")); 
    $.Field({Static:false, Public:false}, "mode", $asm00.TypeRef("BulletHell.Engine.GameMode")); 
    $.Field({Static:false, Public:false}, "titleTexture", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "sb", $asm06.TypeRef("System.Text.StringBuilder")); 
    $.Field({Static:false, Public:false}, "level", $asm00.TypeRef("BulletHell.Engine.Level")); 
    $.Field({Static:false, Public:false}, "levelNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "width", $.Int32); 
    $.Field({Static:false, Public:false}, "height", $.Int32); 
    $.Field({Static:false, Public:false}, "player", $asm00.TypeRef("BulletHell.Engine.Player")); 
    $.Field({Static:false, Public:false}, "camera", $asm00.TypeRef("BulletHell.Engine.Camera")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

